/*
 * Copyright 2018 Aluno.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package view;

import dao.ClienteDAO;
import dao.TipoUsuarioDAO;
import dao.UsuarioDAO;
import model.TipoUsuario;
import model.Usuario;
import model.Cliente;
import swing.JImageFrame;
import swing.event.MyMouseAdapter;
import util.HibernateUtils;
import util.SwingUtils;
import util.TextUtils;
import values.SoftConfig;

import java.awt.Cursor;
import java.awt.Frame;
import java.awt.HeadlessException;
import java.awt.event.KeyEvent;
import java.awt.event.WindowEvent;
import java.io.IOException;
import java.security.NoSuchAlgorithmException;
import java.util.ResourceBundle;
import java.util.concurrent.Executors;
import java.util.concurrent.ScheduledExecutorService;
import java.util.concurrent.TimeUnit;

import javax.swing.ImageIcon;
import javax.swing.JOptionPane;

import org.hibernate.HibernateException;

/**
 *
 * @author Aluno
 */
public class Login extends JImageFrame {
    
    private ResourceBundle bundle;
    private ScheduledExecutorService executorService;
    private Process mysqld;
    private boolean exit;

    /**
     * Creates new form Login
     */
    public Login() {
        init();
    } // Fim do método construtor Login

    private void init() {
        setCursorMouse(new Cursor(Cursor.WAIT_CURSOR));
        bundle = ResourceBundle.getBundle("res/Bundle");
        initComponents();
        startMysqlAndCreateSessionFactory();
        configEventos();
    } // Fim do método init

    private void startMysqlAndCreateSessionFactory() {
        try {
            Runtime runtime = Runtime.getRuntime();
            mysqld = runtime.exec("C:\\xampp\\mysql_start.bat");
        } catch (IOException e) {
            System.err.println("Error starting MySQL");
        }
        
        if (HibernateUtils.getSessionFactory() != null && 
                !HibernateUtils.getSessionFactory().isClosed()) {
            enableComponents();

            return;
        }
        
        executorService = Executors.newSingleThreadScheduledExecutor();
        executorService.scheduleAtFixedRate(() -> {
            if (HibernateUtils.getSessionFactory() == null) {
                System.out.println("Creating Hibernate Session Factory...");
                HibernateUtils.createSessionFactory();
            } else {
                criarAdmin();
                criarClienteAnonimo();
                enableComponents();
                System.out.println("Shutting down the executor service...");
                executorService.shutdownNow();
            }
        }, 0, 1, TimeUnit.SECONDS);
    } // Fim do método startMysqlAndCreateSessionFactory

    public void enableComponents() {
        txtLogin.setEnabled(true);
        txtSenha.setEnabled(true);
        btCancelar.setEnabled(true);
        btEntrar.setEnabled(true);
        txtLogin.requestFocus();
        setCursorMouse(new Cursor(Cursor.DEFAULT_CURSOR));
    } // Fim do método enableComponents

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel2 = new javax.swing.JPanel();
        lblLogin = new javax.swing.JLabel();
        txtLogin = new javax.swing.JCTextField();
        SwingUtils.setFieldLength(txtLogin, values.Length.Usuario.LOGIN, SwingUtils.FIXED_LENGTH);
        lblSenha = new javax.swing.JLabel();
        txtSenha = new javax.swing.JCPasswordField();
        SwingUtils.setFieldLength(txtSenha, values.Length.Usuario.SENHA, SwingUtils.FIXED_LENGTH);
        btEntrar = new javax.swing.JButton();
        btCancelar = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.DO_NOTHING_ON_CLOSE);
        java.util.ResourceBundle bundle = java.util.ResourceBundle.getBundle("res/Bundle"); // NOI18N
        setTitle(bundle.getString("Login.title")); // NOI18N
        setBackgroundImage(new javax.swing.ImageIcon(getClass().getResource("/res/image/adegadocheiro.jpg"))); // NOI18N
        setExtendedState(6);
        setIconImage(new ImageIcon(getClass().getResource("/res/icon/ac.png")).getImage());
        setUndecorated(true);
        setResizable(false);
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowClosed(java.awt.event.WindowEvent evt) {
                formWindowClosed(evt);
            }
            public void windowClosing(java.awt.event.WindowEvent evt) {
                formWindowClosing(evt);
            }
        });

        jPanel2.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0), 5));

        lblLogin.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        lblLogin.setText(bundle.getString("Login.lblLogin.text")); // NOI18N

        txtLogin.setBorder(javax.swing.BorderFactory.createLineBorder(javax.swing.UIManager.getDefaults().getColor("TextField.shadow")));
        txtLogin.setEnabled(false);
        txtLogin.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                txtLoginFocusGained(evt);
            }
        });

        lblSenha.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        lblSenha.setText(bundle.getString("Login.lblSenha.text")); // NOI18N

        txtSenha.setBorder(javax.swing.BorderFactory.createLineBorder(javax.swing.UIManager.getDefaults().getColor("TextField.shadow")));
        txtSenha.setEnabled(false);
        txtSenha.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                txtSenhaFocusGained(evt);
            }
        });

        btEntrar.setIcon(new javax.swing.ImageIcon(getClass().getResource("/res/icon/ic_lock_open_18pt.png"))); // NOI18N
        btEntrar.setText(bundle.getString("Login.btEntrar.text")); // NOI18N
        btEntrar.setEnabled(false);

        btCancelar.setIcon(new javax.swing.ImageIcon(getClass().getResource("/res/icon/ic_cancel_18pt.png"))); // NOI18N
        btCancelar.setText(bundle.getString("cancelar")); // NOI18N
        btCancelar.setEnabled(false);

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGap(20, 20, 20)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addComponent(btEntrar, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(10, 10, 10)
                        .addComponent(btCancelar, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(lblLogin, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(lblSenha, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(txtSenha, javax.swing.GroupLayout.PREFERRED_SIZE, 1, Short.MAX_VALUE)
                            .addComponent(txtLogin, javax.swing.GroupLayout.PREFERRED_SIZE, 1, Short.MAX_VALUE))))
                .addGap(20, 20, 20))
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGap(30, 30, 30)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblLogin)
                    .addComponent(txtLogin, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(10, 10, 10)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblSenha)
                    .addComponent(txtSenha, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(20, 20, 20)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(btCancelar, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(btEntrar, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addGap(20, 20, 20))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap(70, Short.MAX_VALUE)
                .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(70, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap(75, Short.MAX_VALUE)
                .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(75, Short.MAX_VALUE))
        );

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void txtSenhaFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txtSenhaFocusGained
        txtSenha.setBorder(javax.swing.BorderFactory.createLineBorder(javax.swing.UIManager.getDefaults().getColor("TextField.shadow")));
    }//GEN-LAST:event_txtSenhaFocusGained

    private void txtLoginFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txtLoginFocusGained
        txtLogin.setBorder(javax.swing.BorderFactory.createLineBorder(javax.swing.UIManager.getDefaults().getColor("TextField.shadow")));
    }//GEN-LAST:event_txtLoginFocusGained

    private void formWindowClosing(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowClosing
        if (btCancelar.isEnabled()) {
            cancelar();
        }
    }//GEN-LAST:event_formWindowClosing

    private void formWindowClosed(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowClosed
        if (mysqld != null) {
            mysqld.destroyForcibly();
        }

        executorService = null;
        
        if (exit) {
            try {
                HibernateUtils.getSessionFactory().close();
                Runtime runtime = Runtime.getRuntime();
                runtime.exec("C:\\xampp\\mysql_stop.bat");
            } catch (IOException | HibernateException e) {
                System.err.println("Error closing Hibernate session and stopping MySQL: " + e);
            }

            System.exit(0);
        }
    }//GEN-LAST:event_formWindowClosed

    private void criarAdmin() {
        if (new UsuarioDAO().listar().isEmpty()) {
            if (new TipoUsuarioDAO().listar().isEmpty()) {
                criarTiposUsuario();
            }
            
            criarUsuario();
        }
    } // Fim do metodo criarAdmin

    private void criarTiposUsuario() throws HibernateException {
        try {
            TipoUsuarioDAO tuDAO = new TipoUsuarioDAO();
            TipoUsuario gerente = new TipoUsuario();
            gerente.setTipo(bundle.getString("gerente"));
            gerente.setAllBooleanFields(Boolean.TRUE);
            tuDAO.salvar(gerente);

            TipoUsuario atendente = new TipoUsuario();
            atendente.setTipo(bundle.getString("atendente"));
            atendente.setAllBooleanFields(Boolean.FALSE);
            atendente.setCadCliente(Boolean.TRUE);
            atendente.setRealizarVenda(Boolean.TRUE);
            atendente.setEmitirRelatorioVendas(Boolean.TRUE);
            tuDAO.salvar(atendente);
        } catch (HibernateException ex) {
            System.err.println("Error: criarTiposUsuario: " + ex);
        }
    } // Fim do método criarTiposUsuario
    
    private void criarUsuario() throws HibernateException {
        try {
            TipoUsuario tipoUsuario;
            
            if ((tipoUsuario = new TipoUsuarioDAO().consultarPorCodigo(1)) != null) {
                Usuario usuario = new Usuario();
                usuario.setNome(bundle.getString("admin"));
                usuario.setLogin("admin");
                usuario.setSenha(TextUtils.md5("admin"));
                usuario.setTipoUsuario(tipoUsuario);
                new UsuarioDAO().salvar(usuario);
            }
        } catch (HibernateException | NoSuchAlgorithmException ex) {
            System.err.println("Error: criarUsuario: " + ex);
        }
    } // Fim do método criarUsuario
    
    private void criarClienteAnonimo() {
        try {
            if (new ClienteDAO().consultarPorCodigo(1) == null) {
                Cliente cliente = new Cliente();
                cliente.setNome(bundle.getString("anonimo"));
                cliente.setNuCpf("11111111111");
                new ClienteDAO().salvar(cliente);
            }
        } catch (HibernateException ex) {
            System.err.println("Error: criarClienteAnonimo: " + ex);
        }
    } // Fim do método criarClienteAnonimo
    
    private void entrar() {
        validarLogin(txtLogin.getText().trim(), String.valueOf(txtSenha.getPassword()));
    } // Fim do método entrar
    
    private void cancelar() {
        if (JOptionPane.showConfirmDialog((Frame) getParent(), 
                bundle.getString("Login.confirmarSair"), 
                bundle.getString("Login.sair"), 0) == JOptionPane.YES_OPTION) {
            exit = true;
            dispatchEvent(new WindowEvent(this, WindowEvent.WINDOW_CLOSED));
        }
    } // Fim do método cancelar
    
    private void validarLogin(String login, String senha) {
        if (isFormValid()) {
            setCursorMouse(new Cursor(Cursor.WAIT_CURSOR));
            Menu.loggedUser = null;
            UsuarioDAO usuarioDAO = new UsuarioDAO();
            
            try {
                Menu.loggedUser = usuarioDAO.validarLogin(login, TextUtils.md5(senha));
            } catch (NoSuchAlgorithmException ex) {
                System.err.println("Error: validarLogin: " + ex);
            }
            
            if (Menu.loggedUser != null) {
                Menu menu = new Menu();
                menu.setVisible(true);
                setCursorMouse(new Cursor(Cursor.DEFAULT_CURSOR));
                exit = false;
                this.dispose();
            } else {
                setCursorMouse(new Cursor(Cursor.DEFAULT_CURSOR));
                JOptionPane.showMessageDialog(getParent(), 
                        bundle.getString("Login.loginOuSenhaInvalidos"));
                txtLogin.requestFocus();
            }
        }
    } // Fim do metodo validarLogin
    
    private boolean isFormValid() throws HeadlessException {
        requestFocus();
        boolean valid = true;
        
        if (txtLogin.getText().trim().isEmpty()) {
            txtLogin.setBorder(javax.swing.BorderFactory.createLineBorder(java.awt.Color.red));
            valid = false;
        }
        
        if (String.valueOf(txtSenha.getPassword()).isEmpty()) {
            txtSenha.setBorder(javax.swing.BorderFactory.createLineBorder(java.awt.Color.red));
            valid = false;
        }
        
        if (!valid) {
            JOptionPane.showMessageDialog(getParent(), bundle.getString("preenchaOsCampos"));
        }
        
        return valid;
    } // Fim do método isFormValid
    
    protected void configEventos() {
        new MyMouseAdapter(btEntrar).setAction(this, KeyEvent.VK_ENTER, 0, () -> {
            entrar();
        });
        new MyMouseAdapter(btCancelar).setAction(this, KeyEvent.VK_ESCAPE, 0, () -> {
            cancelar();
        });
    } // fim do método configEventos

    public void setCursorMouse(Cursor cursor) {
        getContentPane().setCursor(cursor);
    } // Fim do método setCursorMouse

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        SoftConfig.setLookAndFeel();
//        try {
//            UIManager.setLookAndFeel(UIManager.getSystemLookAndFeelClassName());
//        } catch (ClassNotFoundException | InstantiationException | IllegalAccessException | UnsupportedLookAndFeelException ex) {
//            System.err.println("Error: " + ex);
//        }

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(() -> {
            new Login().setVisible(true);
        });
    } // Fim do método main

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btCancelar;
    private javax.swing.JButton btEntrar;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JLabel lblLogin;
    private javax.swing.JLabel lblSenha;
    private javax.swing.JCTextField txtLogin;
    private javax.swing.JCPasswordField txtSenha;
    // End of variables declaration//GEN-END:variables

} // Fim da classe Login
